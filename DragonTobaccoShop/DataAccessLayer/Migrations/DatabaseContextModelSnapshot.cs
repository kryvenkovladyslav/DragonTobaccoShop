// <auto-generated />
using System;
using DataAccessLayer.Common.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.ApplicationModels.CartSession", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("UserID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("UserID");

                    b.HasKey("ID")
                        .HasName("CartSession_PK_ID_Constraint");

                    b.HasIndex("UserID");

                    b.ToTable("CartSession", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.CheckedProduct", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date");

                    b.Property<Guid>("ProductID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ProductID");

                    b.Property<Guid>("UserID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("UserID");

                    b.HasKey("ID")
                        .HasName("CheckedProduct_PK_ID_Constraint");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("CheckedProduct", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.Manufacturer", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("ImagePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("Name");

                    b.HasKey("ID")
                        .HasName("Manufacturer_PK_ID_Constraint");

                    b.ToTable("Manufacturer", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.ManufacturerDescription", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("ManufacturerID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ManufacturerID");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("Path");

                    b.HasKey("ID")
                        .HasName("ManufacturerDescription_PK_ID_Constraint");

                    b.HasIndex("ManufacturerID");

                    b.ToTable("ManufacturerDescription", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.Order", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasDefaultValue("Registered")
                        .HasColumnName("Status");

                    b.Property<decimal>("TototalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal")
                        .HasDefaultValue(0m)
                        .HasColumnName("TotalPrice");

                    b.Property<Guid>("UserID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("UserID");

                    b.HasKey("ID")
                        .HasName("Order_PK_ID_Constraint");

                    b.HasIndex("UserID");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.OrderItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid?>("CartSessionID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("CartSessionID");

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("Count");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("OrderID");

                    b.Property<Guid?>("ProductID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ProductID");

                    b.HasKey("ID")
                        .HasName("OrderItem_PK_ID_Constraint");

                    b.HasIndex("CartSessionID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.Product", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("Discount")
                        .HasColumnType("int")
                        .HasColumnName("Discount");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar")
                        .HasColumnName("ImagePath");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasColumnName("IsAvailable");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal")
                        .HasColumnName("Price");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasColumnName("Rating");

                    b.Property<Guid?>("WishListID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("WishListID");

                    b.HasKey("ID")
                        .HasName("Product_PK_ID_Constraint");

                    b.HasIndex("WishListID");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.Review", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("Evaluation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("Evaluation");

                    b.Property<Guid>("ProductID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("UserID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("Text");

                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("UserID");

                    b.HasKey("ID")
                        .HasName("Review_PK_ID_Constraint");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("Role_PK_ID_Constraint");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.Strength", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Kind")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Kind");

                    b.HasKey("ID")
                        .HasName("Strength_PK_ID_Constraint");

                    b.ToTable("Strength", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.Taste", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("Name");

                    b.HasKey("ID")
                        .HasName("Taste_PK_ID_Constraint");

                    b.ToTable("Taste", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.Tobacco", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Country")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("County");

                    b.Property<bool>("IsIced")
                        .HasColumnType("bit")
                        .HasColumnName("IsIced");

                    b.Property<bool>("IsMint")
                        .HasColumnType("bit")
                        .HasColumnName("IsMint");

                    b.Property<bool>("IsMixed")
                        .HasColumnType("bit")
                        .HasColumnName("IsMixed");

                    b.Property<bool>("IsSmoky")
                        .HasColumnType("bit")
                        .HasColumnName("IsSmoky");

                    b.Property<bool>("IsSweet")
                        .HasColumnType("bit")
                        .HasColumnName("IsSweet");

                    b.Property<string>("Leaf")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Leaf");

                    b.Property<Guid?>("ManufacturerID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ManufacturerID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Name");

                    b.Property<string>("Package")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasColumnName("Package");

                    b.Property<string>("Slicing")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Slicing");

                    b.Property<Guid?>("StrengthID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("StrengthID");

                    b.Property<double>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("Weight");

                    b.HasKey("ID")
                        .HasName("Tobacco_PK_ID_Constraint");

                    b.HasIndex("ManufacturerID");

                    b.HasIndex("StrengthID");

                    b.ToTable("Tobacco", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.TobaccoDescription", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("Path");

                    b.Property<Guid>("TobaccoID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("TobaccoID");

                    b.HasKey("ID")
                        .HasName("TobaccoDescription_PK_ID_Constraint");

                    b.HasIndex("TobaccoID");

                    b.ToTable("TobaccoDescription", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.TobaccosTastes", b =>
                {
                    b.Property<Guid>("TobaccoID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("TobaccoID");

                    b.Property<Guid>("TasteID")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("TasteID");

                    b.HasKey("TobaccoID", "TasteID")
                        .HasName("TobaccosTastes_PK_ID_Constraint");

                    b.HasIndex("TasteID");

                    b.ToTable("TobaccosTastes", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AccountImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("date")
                        .HasColumnName("BirthDay");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasColumnName("LastName");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistraionDate")
                        .HasColumnType("date")
                        .HasColumnName("RegistrationDate");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .HasName("User_PK_ID_Constraint");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.WishList", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("NEWID()");

                    b.HasKey("ID")
                        .HasName("WishList_PK_ID_Constraint");

                    b.ToTable("WishList", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("UserID");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("UNIQUEIDENTIFIER")
                        .HasColumnName("RoleID");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.UsersRoles", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasIndex("RoleId");

                    b.ToTable("UsersRoles", (string)null);
                });

            modelBuilder.Entity("Domain.ApplicationModels.CartSession", b =>
                {
                    b.HasOne("Domain.ApplicationModels.User", "User")
                        .WithMany("CartSessions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CartSession_FK_User_ID_Constraint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.ApplicationModels.CheckedProduct", b =>
                {
                    b.HasOne("Domain.ApplicationModels.Product", "Product")
                        .WithMany("CheckedProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Product_FK_CheckedProduct_ID_Constraint");

                    b.HasOne("Domain.ApplicationModels.User", "User")
                        .WithMany("CheckedProducts")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CheckedProduct_FK_User_ID_Constraint");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.ApplicationModels.ManufacturerDescription", b =>
                {
                    b.HasOne("Domain.ApplicationModels.Manufacturer", "Manufacturer")
                        .WithMany("Descriptions")
                        .HasForeignKey("ManufacturerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ManufacturerDescription_FK_Manufacturer_ID_Constraint");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Domain.ApplicationModels.Order", b =>
                {
                    b.HasOne("Domain.ApplicationModels.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Order_FK_User_ID_Constraint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.ApplicationModels.OrderItem", b =>
                {
                    b.HasOne("Domain.ApplicationModels.CartSession", "CartSession")
                        .WithMany("OrderItems")
                        .HasForeignKey("CartSessionID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("OrderItem_FK_CartSession_ID_Constraint");

                    b.HasOne("Domain.ApplicationModels.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Order_FK_OrderItem_ID_Constraint");

                    b.HasOne("Domain.ApplicationModels.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("OrderItem_FK_Product_ID_Constraint");

                    b.Navigation("CartSession");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.ApplicationModels.Product", b =>
                {
                    b.HasOne("Domain.ApplicationModels.Tobacco", "Tobacco")
                        .WithOne("Product")
                        .HasForeignKey("Domain.ApplicationModels.Product", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Product_FK_Tobacco_ID_Constraint");

                    b.HasOne("Domain.ApplicationModels.WishList", "WishList")
                        .WithMany("Products")
                        .HasForeignKey("WishListID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Product_FK_WishList_ID_Constraint");

                    b.Navigation("Tobacco");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("Domain.ApplicationModels.Review", b =>
                {
                    b.HasOne("Domain.ApplicationModels.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Review_FK_Product_ID_Constraint");

                    b.HasOne("Domain.ApplicationModels.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Review_FK_User_ID_Constraint");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.ApplicationModels.Tobacco", b =>
                {
                    b.HasOne("Domain.ApplicationModels.Manufacturer", "Manufacturer")
                        .WithMany("Tobaccos")
                        .HasForeignKey("ManufacturerID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Tobacco_FK_Manufacturer_ID_Constraint");

                    b.HasOne("Domain.ApplicationModels.Strength", "Strength")
                        .WithMany("Tobaccos")
                        .HasForeignKey("StrengthID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Tobacco_FK_Strength_ID_Constraint");

                    b.Navigation("Manufacturer");

                    b.Navigation("Strength");
                });

            modelBuilder.Entity("Domain.ApplicationModels.TobaccoDescription", b =>
                {
                    b.HasOne("Domain.ApplicationModels.Tobacco", "Tobacco")
                        .WithMany("Descriptions")
                        .HasForeignKey("TobaccoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TobaccoDescription_FK_Tobacco_ID_Constraint");

                    b.Navigation("Tobacco");
                });

            modelBuilder.Entity("Domain.ApplicationModels.TobaccosTastes", b =>
                {
                    b.HasOne("Domain.ApplicationModels.Taste", "Taste")
                        .WithMany("Tobaccos")
                        .HasForeignKey("TasteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TobaccosTastes_FK_Taste_ID_Constraint");

                    b.HasOne("Domain.ApplicationModels.Tobacco", "Tobacco")
                        .WithMany("Tastes")
                        .HasForeignKey("TobaccoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("TobaccosTastes_FK_Tobacco_ID_Constraint");

                    b.Navigation("Taste");

                    b.Navigation("Tobacco");
                });

            modelBuilder.Entity("Domain.ApplicationModels.WishList", b =>
                {
                    b.HasOne("Domain.ApplicationModels.User", "User")
                        .WithOne("WishList")
                        .HasForeignKey("Domain.ApplicationModels.WishList", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("User_FK_WishList_ID_Constraint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.ApplicationModels.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.ApplicationModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.ApplicationModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.ApplicationModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ApplicationModels.UsersRoles", b =>
                {
                    b.HasOne("Domain.ApplicationModels.Role", "Role")
                        .WithMany("UsersRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UsersRoles_FK_Role_ID_Constraint");

                    b.HasOne("Domain.ApplicationModels.User", "User")
                        .WithMany("UsersRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("UsersRoles_FK_User_ID_Constraint");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", null)
                        .WithOne()
                        .HasForeignKey("Domain.ApplicationModels.UsersRoles", "UserId", "RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.ApplicationModels.CartSession", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Domain.ApplicationModels.Manufacturer", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Tobaccos");
                });

            modelBuilder.Entity("Domain.ApplicationModels.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.ApplicationModels.Product", b =>
                {
                    b.Navigation("CheckedProducts");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Domain.ApplicationModels.Role", b =>
                {
                    b.Navigation("UsersRoles");
                });

            modelBuilder.Entity("Domain.ApplicationModels.Strength", b =>
                {
                    b.Navigation("Tobaccos");
                });

            modelBuilder.Entity("Domain.ApplicationModels.Taste", b =>
                {
                    b.Navigation("Tobaccos");
                });

            modelBuilder.Entity("Domain.ApplicationModels.Tobacco", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("Product");

                    b.Navigation("Tastes");
                });

            modelBuilder.Entity("Domain.ApplicationModels.User", b =>
                {
                    b.Navigation("CartSessions");

                    b.Navigation("CheckedProducts");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("UsersRoles");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("Domain.ApplicationModels.WishList", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
